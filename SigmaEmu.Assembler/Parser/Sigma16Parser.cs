//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Parser\Sigma16.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class Sigma16Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		REG=1, DATA=2, ADD=3, SUB=4, MUL=5, DIV=6, CMPLT=7, CMPEQ=8, CMPGT=9, 
		INV=10, AND=11, OR=12, XOR=13, SHIFTL=14, SHIFTR=15, TRAP=16, LEA=17, 
		LOAD=18, STORE=19, JUMPF=20, JUMPT=21, JAL=22, JUMP=23, COMMA=24, LBRACK=25, 
		RBRACK=26, DOLLAR=27, HEXNUM=28, INVALID_HEXNUM=29, NUM=30, INVALID_NUM=31, 
		ID=32, SPACE=33, EOL=34, COMMENT=35, ANY=36;
	public const int
		RULE_program = 0, RULE_instruction = 1, RULE_rrr_instruction = 2, RULE_rx_instruction = 3, 
		RULE_x_instruction = 4, RULE_data_instruction = 5, RULE_label_def = 6, 
		RULE_label = 7, RULE_displacement = 8, RULE_number_literal = 9, RULE_rrr_command = 10, 
		RULE_rx_command = 11, RULE_x_command = 12;
	public static readonly string[] ruleNames = {
		"program", "instruction", "rrr_instruction", "rx_instruction", "x_instruction", 
		"data_instruction", "label_def", "label", "displacement", "number_literal", 
		"rrr_command", "rx_command", "x_command"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"','", "'['", "']'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "REG", "DATA", "ADD", "SUB", "MUL", "DIV", "CMPLT", "CMPEQ", "CMPGT", 
		"INV", "AND", "OR", "XOR", "SHIFTL", "SHIFTR", "TRAP", "LEA", "LOAD", 
		"STORE", "JUMPF", "JUMPT", "JAL", "JUMP", "COMMA", "LBRACK", "RBRACK", 
		"DOLLAR", "HEXNUM", "INVALID_HEXNUM", "NUM", "INVALID_NUM", "ID", "SPACE", 
		"EOL", "COMMENT", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sigma16.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Sigma16Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Sigma16Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Sigma16Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Sigma16Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 26;
				instruction();
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 4311744508L) != 0 );
			State = 31;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_defContext[] label_def() {
			return GetRuleContexts<Label_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_defContext label_def(int i) {
			return GetRuleContext<Label_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rrr_instructionContext rrr_instruction() {
			return GetRuleContext<Rrr_instructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rx_instructionContext rx_instruction() {
			return GetRuleContext<Rx_instructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public X_instructionContext x_instruction() {
			return GetRuleContext<X_instructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_instructionContext data_instruction() {
			return GetRuleContext<Data_instructionContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 2, RULE_instruction);
		int _la;
		try {
			int _alt;
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 33;
						label_def();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 36;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 38;
					label_def();
					}
					}
					State = 43;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 48;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case SUB:
				case MUL:
				case DIV:
				case CMPLT:
				case CMPEQ:
				case CMPGT:
				case INV:
				case AND:
				case OR:
				case XOR:
				case SHIFTL:
				case SHIFTR:
				case TRAP:
					{
					State = 44;
					rrr_instruction();
					}
					break;
				case LEA:
				case LOAD:
				case STORE:
				case JUMPF:
				case JUMPT:
				case JAL:
					{
					State = 45;
					rx_instruction();
					}
					break;
				case JUMP:
					{
					State = 46;
					x_instruction();
					}
					break;
				case DATA:
					{
					State = 47;
					data_instruction();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rrr_instructionContext : ParserRuleContext {
		public Rrr_commandContext mnemonic;
		public IToken destinationReg;
		public IToken firstOperand;
		public IToken secondOperand;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Sigma16Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Sigma16Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rrr_commandContext rrr_command() {
			return GetRuleContext<Rrr_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REG() { return GetTokens(Sigma16Parser.REG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG(int i) {
			return GetToken(Sigma16Parser.REG, i);
		}
		public Rrr_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rrr_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterRrr_instruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitRrr_instruction(this);
		}
	}

	[RuleVersion(0)]
	public Rrr_instructionContext rrr_instruction() {
		Rrr_instructionContext _localctx = new Rrr_instructionContext(Context, State);
		EnterRule(_localctx, 4, RULE_rrr_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			_localctx.mnemonic = rrr_command();
			State = 53;
			_localctx.destinationReg = Match(REG);
			State = 54;
			Match(COMMA);
			State = 55;
			_localctx.firstOperand = Match(REG);
			State = 56;
			Match(COMMA);
			State = 57;
			_localctx.secondOperand = Match(REG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rx_instructionContext : ParserRuleContext {
		public Rx_commandContext mnemonic;
		public IToken destinationReg;
		public IToken offsetReg;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Sigma16Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DisplacementContext displacement() {
			return GetRuleContext<DisplacementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(Sigma16Parser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(Sigma16Parser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rx_commandContext rx_command() {
			return GetRuleContext<Rx_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REG() { return GetTokens(Sigma16Parser.REG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG(int i) {
			return GetToken(Sigma16Parser.REG, i);
		}
		public Rx_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rx_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterRx_instruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitRx_instruction(this);
		}
	}

	[RuleVersion(0)]
	public Rx_instructionContext rx_instruction() {
		Rx_instructionContext _localctx = new Rx_instructionContext(Context, State);
		EnterRule(_localctx, 6, RULE_rx_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			_localctx.mnemonic = rx_command();
			State = 60;
			_localctx.destinationReg = Match(REG);
			State = 61;
			Match(COMMA);
			State = 62;
			displacement();
			State = 63;
			Match(LBRACK);
			State = 64;
			_localctx.offsetReg = Match(REG);
			State = 65;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class X_instructionContext : ParserRuleContext {
		public X_commandContext mnemonic;
		public IToken offsetReg;
		[System.Diagnostics.DebuggerNonUserCode] public DisplacementContext displacement() {
			return GetRuleContext<DisplacementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(Sigma16Parser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(Sigma16Parser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public X_commandContext x_command() {
			return GetRuleContext<X_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG() { return GetToken(Sigma16Parser.REG, 0); }
		public X_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterX_instruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitX_instruction(this);
		}
	}

	[RuleVersion(0)]
	public X_instructionContext x_instruction() {
		X_instructionContext _localctx = new X_instructionContext(Context, State);
		EnterRule(_localctx, 8, RULE_x_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			_localctx.mnemonic = x_command();
			State = 68;
			displacement();
			State = 69;
			Match(LBRACK);
			State = 70;
			_localctx.offsetReg = Match(REG);
			State = 71;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_instructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(Sigma16Parser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Number_literalContext number_literal() {
			return GetRuleContext<Number_literalContext>(0);
		}
		public Data_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterData_instruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitData_instruction(this);
		}
	}

	[RuleVersion(0)]
	public Data_instructionContext data_instruction() {
		Data_instructionContext _localctx = new Data_instructionContext(Context, State);
		EnterRule(_localctx, 10, RULE_data_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(DATA);
			State = 74;
			number_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public Label_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterLabel_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitLabel_def(this);
		}
	}

	[RuleVersion(0)]
	public Label_defContext label_def() {
		Label_defContext _localctx = new Label_defContext(Context, State);
		EnterRule(_localctx, 12, RULE_label_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(Sigma16Parser.ID, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 14, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplacementContext : ParserRuleContext {
		public Number_literalContext num;
		[System.Diagnostics.DebuggerNonUserCode] public Number_literalContext number_literal() {
			return GetRuleContext<Number_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public DisplacementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_displacement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterDisplacement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitDisplacement(this);
		}
	}

	[RuleVersion(0)]
	public DisplacementContext displacement() {
		DisplacementContext _localctx = new DisplacementContext(Context, State);
		EnterRule(_localctx, 16, RULE_displacement);
		try {
			State = 82;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HEXNUM:
			case NUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				_localctx.num = number_literal();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81;
				label();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(Sigma16Parser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXNUM() { return GetToken(Sigma16Parser.HEXNUM, 0); }
		public Number_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterNumber_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitNumber_literal(this);
		}
	}

	[RuleVersion(0)]
	public Number_literalContext number_literal() {
		Number_literalContext _localctx = new Number_literalContext(Context, State);
		EnterRule(_localctx, 18, RULE_number_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_la = TokenStream.LA(1);
			if ( !(_la==HEXNUM || _la==NUM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rrr_commandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(Sigma16Parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(Sigma16Parser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(Sigma16Parser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(Sigma16Parser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMPLT() { return GetToken(Sigma16Parser.CMPLT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMPEQ() { return GetToken(Sigma16Parser.CMPEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMPGT() { return GetToken(Sigma16Parser.CMPGT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INV() { return GetToken(Sigma16Parser.INV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(Sigma16Parser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(Sigma16Parser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(Sigma16Parser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFTL() { return GetToken(Sigma16Parser.SHIFTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFTR() { return GetToken(Sigma16Parser.SHIFTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAP() { return GetToken(Sigma16Parser.TRAP, 0); }
		public Rrr_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rrr_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterRrr_command(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitRrr_command(this);
		}
	}

	[RuleVersion(0)]
	public Rrr_commandContext rrr_command() {
		Rrr_commandContext _localctx = new Rrr_commandContext(Context, State);
		EnterRule(_localctx, 20, RULE_rrr_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 131064L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rx_commandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEA() { return GetToken(Sigma16Parser.LEA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(Sigma16Parser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORE() { return GetToken(Sigma16Parser.STORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMPF() { return GetToken(Sigma16Parser.JUMPF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMPT() { return GetToken(Sigma16Parser.JUMPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JAL() { return GetToken(Sigma16Parser.JAL, 0); }
		public Rx_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rx_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterRx_command(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitRx_command(this);
		}
	}

	[RuleVersion(0)]
	public Rx_commandContext rx_command() {
		Rx_commandContext _localctx = new Rx_commandContext(Context, State);
		EnterRule(_localctx, 22, RULE_rx_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 8257536L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class X_commandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(Sigma16Parser.JUMP, 0); }
		public X_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterX_command(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitX_command(this);
		}
	}

	[RuleVersion(0)]
	public X_commandContext x_command() {
		X_commandContext _localctx = new X_commandContext(Context, State);
		EnterRule(_localctx, 24, RULE_x_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(JUMP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,36,93,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,4,0,28,8,0,11,0,
		12,0,29,1,0,1,0,1,1,4,1,35,8,1,11,1,12,1,36,1,1,5,1,40,8,1,10,1,12,1,43,
		9,1,1,1,1,1,1,1,1,1,3,1,49,8,1,3,1,51,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
		6,1,6,1,7,1,7,1,8,1,8,3,8,83,8,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
		1,12,0,0,13,0,2,4,6,8,10,12,14,16,18,20,22,24,0,3,2,0,28,28,30,30,1,0,
		3,16,1,0,17,22,87,0,27,1,0,0,0,2,50,1,0,0,0,4,52,1,0,0,0,6,59,1,0,0,0,
		8,67,1,0,0,0,10,73,1,0,0,0,12,76,1,0,0,0,14,78,1,0,0,0,16,82,1,0,0,0,18,
		84,1,0,0,0,20,86,1,0,0,0,22,88,1,0,0,0,24,90,1,0,0,0,26,28,3,2,1,0,27,
		26,1,0,0,0,28,29,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,31,1,0,0,0,31,
		32,5,0,0,1,32,1,1,0,0,0,33,35,3,12,6,0,34,33,1,0,0,0,35,36,1,0,0,0,36,
		34,1,0,0,0,36,37,1,0,0,0,37,51,1,0,0,0,38,40,3,12,6,0,39,38,1,0,0,0,40,
		43,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,48,1,0,0,0,43,41,1,0,0,0,44,
		49,3,4,2,0,45,49,3,6,3,0,46,49,3,8,4,0,47,49,3,10,5,0,48,44,1,0,0,0,48,
		45,1,0,0,0,48,46,1,0,0,0,48,47,1,0,0,0,49,51,1,0,0,0,50,34,1,0,0,0,50,
		41,1,0,0,0,51,3,1,0,0,0,52,53,3,20,10,0,53,54,5,1,0,0,54,55,5,24,0,0,55,
		56,5,1,0,0,56,57,5,24,0,0,57,58,5,1,0,0,58,5,1,0,0,0,59,60,3,22,11,0,60,
		61,5,1,0,0,61,62,5,24,0,0,62,63,3,16,8,0,63,64,5,25,0,0,64,65,5,1,0,0,
		65,66,5,26,0,0,66,7,1,0,0,0,67,68,3,24,12,0,68,69,3,16,8,0,69,70,5,25,
		0,0,70,71,5,1,0,0,71,72,5,26,0,0,72,9,1,0,0,0,73,74,5,2,0,0,74,75,3,18,
		9,0,75,11,1,0,0,0,76,77,3,14,7,0,77,13,1,0,0,0,78,79,5,32,0,0,79,15,1,
		0,0,0,80,83,3,18,9,0,81,83,3,14,7,0,82,80,1,0,0,0,82,81,1,0,0,0,83,17,
		1,0,0,0,84,85,7,0,0,0,85,19,1,0,0,0,86,87,7,1,0,0,87,21,1,0,0,0,88,89,
		7,2,0,0,89,23,1,0,0,0,90,91,5,23,0,0,91,25,1,0,0,0,6,29,36,41,48,50,82
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
