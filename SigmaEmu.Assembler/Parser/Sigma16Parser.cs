//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Parser\Sigma16.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class Sigma16Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, REG=2, RRR_COMMAND=3, RX_COMMAND=4, X_COMMAND=5, ADD=6, SUB=7, 
		MUL=8, DIV=9, CMPLT=10, CMPEQ=11, CMPGT=12, INV=13, AND=14, OR=15, XOR=16, 
		SHIFTL=17, SHIFTR=18, TRAP=19, LEA=20, LOAD=21, STORE=22, JUMPF=23, JUMPT=24, 
		JAL=25, JUMP=26, COMMA=27, LBRACK=28, RBRACK=29, NUM=30, LABEL=31, SPACE=32, 
		EOL=33, COMMENT=34;
	public const int
		RULE_program = 0, RULE_instruction = 1, RULE_rrr_instruction = 2, RULE_rx_instruction = 3, 
		RULE_x_instruction = 4, RULE_data_instruction = 5, RULE_label_def = 6, 
		RULE_displacement = 7;
	public static readonly string[] ruleNames = {
		"program", "instruction", "rrr_instruction", "rx_instruction", "x_instruction", 
		"data_instruction", "label_def", "displacement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'data'", null, null, null, null, "'add'", "'sub'", "'mul'", "'div'", 
		"'cmplt'", "'cmpeq'", "'cmpgt'", "'inv'", "'and'", "'or'", "'xor'", "'shiftl'", 
		"'shiftr'", "'trap'", "'lea'", "'load'", "'store'", "'jumpf'", "'jumpt'", 
		"'jal'", "'jump'", "','", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "REG", "RRR_COMMAND", "RX_COMMAND", "X_COMMAND", "ADD", "SUB", 
		"MUL", "DIV", "CMPLT", "CMPEQ", "CMPGT", "INV", "AND", "OR", "XOR", "SHIFTL", 
		"SHIFTR", "TRAP", "LEA", "LOAD", "STORE", "JUMPF", "JUMPT", "JAL", "JUMP", 
		"COMMA", "LBRACK", "RBRACK", "NUM", "LABEL", "SPACE", "EOL", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sigma16.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Sigma16Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Sigma16Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Sigma16Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 2147483706L) != 0) {
				{
				{
				State = 16;
				instruction();
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rrr_instructionContext rrr_instruction() {
			return GetRuleContext<Rrr_instructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rx_instructionContext rx_instruction() {
			return GetRuleContext<Rx_instructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public X_instructionContext x_instruction() {
			return GetRuleContext<X_instructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_instructionContext data_instruction() {
			return GetRuleContext<Data_instructionContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 2, RULE_instruction);
		try {
			State = 26;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 22;
				rrr_instruction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 23;
				rx_instruction();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 24;
				x_instruction();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 25;
				data_instruction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rrr_instructionContext : ParserRuleContext {
		public IToken destinationReg;
		public IToken firstOperand;
		public IToken secondOperand;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRR_COMMAND() { return GetToken(Sigma16Parser.RRR_COMMAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Sigma16Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Sigma16Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REG() { return GetTokens(Sigma16Parser.REG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG(int i) {
			return GetToken(Sigma16Parser.REG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_defContext label_def() {
			return GetRuleContext<Label_defContext>(0);
		}
		public Rrr_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rrr_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterRrr_instruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitRrr_instruction(this);
		}
	}

	[RuleVersion(0)]
	public Rrr_instructionContext rrr_instruction() {
		Rrr_instructionContext _localctx = new Rrr_instructionContext(Context, State);
		EnterRule(_localctx, 4, RULE_rrr_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LABEL) {
				{
				State = 28;
				label_def();
				}
			}

			State = 31;
			Match(RRR_COMMAND);
			State = 32;
			_localctx.destinationReg = Match(REG);
			State = 33;
			Match(COMMA);
			State = 34;
			_localctx.firstOperand = Match(REG);
			State = 35;
			Match(COMMA);
			State = 36;
			_localctx.secondOperand = Match(REG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rx_instructionContext : ParserRuleContext {
		public IToken destinationReg;
		public IToken offsetReg;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RX_COMMAND() { return GetToken(Sigma16Parser.RX_COMMAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Sigma16Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DisplacementContext displacement() {
			return GetRuleContext<DisplacementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(Sigma16Parser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(Sigma16Parser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REG() { return GetTokens(Sigma16Parser.REG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG(int i) {
			return GetToken(Sigma16Parser.REG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_defContext label_def() {
			return GetRuleContext<Label_defContext>(0);
		}
		public Rx_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rx_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterRx_instruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitRx_instruction(this);
		}
	}

	[RuleVersion(0)]
	public Rx_instructionContext rx_instruction() {
		Rx_instructionContext _localctx = new Rx_instructionContext(Context, State);
		EnterRule(_localctx, 6, RULE_rx_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LABEL) {
				{
				State = 38;
				label_def();
				}
			}

			State = 41;
			Match(RX_COMMAND);
			State = 42;
			_localctx.destinationReg = Match(REG);
			State = 43;
			Match(COMMA);
			State = 44;
			displacement();
			State = 45;
			Match(LBRACK);
			State = 46;
			_localctx.offsetReg = Match(REG);
			State = 47;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class X_instructionContext : ParserRuleContext {
		public IToken offsetReg;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X_COMMAND() { return GetToken(Sigma16Parser.X_COMMAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DisplacementContext displacement() {
			return GetRuleContext<DisplacementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(Sigma16Parser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(Sigma16Parser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG() { return GetToken(Sigma16Parser.REG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_defContext label_def() {
			return GetRuleContext<Label_defContext>(0);
		}
		public X_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterX_instruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitX_instruction(this);
		}
	}

	[RuleVersion(0)]
	public X_instructionContext x_instruction() {
		X_instructionContext _localctx = new X_instructionContext(Context, State);
		EnterRule(_localctx, 8, RULE_x_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LABEL) {
				{
				State = 49;
				label_def();
				}
			}

			State = 52;
			Match(X_COMMAND);
			State = 53;
			displacement();
			State = 54;
			Match(LBRACK);
			State = 55;
			_localctx.offsetReg = Match(REG);
			State = 56;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_instructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(Sigma16Parser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_defContext label_def() {
			return GetRuleContext<Label_defContext>(0);
		}
		public Data_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterData_instruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitData_instruction(this);
		}
	}

	[RuleVersion(0)]
	public Data_instructionContext data_instruction() {
		Data_instructionContext _localctx = new Data_instructionContext(Context, State);
		EnterRule(_localctx, 10, RULE_data_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LABEL) {
				{
				State = 58;
				label_def();
				}
			}

			State = 61;
			Match(T__0);
			State = 62;
			Match(NUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(Sigma16Parser.LABEL, 0); }
		public Label_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterLabel_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitLabel_def(this);
		}
	}

	[RuleVersion(0)]
	public Label_defContext label_def() {
		Label_defContext _localctx = new Label_defContext(Context, State);
		EnterRule(_localctx, 12, RULE_label_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(LABEL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplacementContext : ParserRuleContext {
		public IToken num;
		public IToken label;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(Sigma16Parser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(Sigma16Parser.LABEL, 0); }
		public DisplacementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_displacement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterDisplacement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitDisplacement(this);
		}
	}

	[RuleVersion(0)]
	public DisplacementContext displacement() {
		DisplacementContext _localctx = new DisplacementContext(Context, State);
		EnterRule(_localctx, 14, RULE_displacement);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				_localctx.num = Match(NUM);
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				_localctx.label = Match(LABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,34,71,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,5,0,18,8,0,10,0,12,0,21,9,0,1,1,1,1,1,1,1,1,3,1,27,8,1,1,2,3,2,
		30,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,3,3,40,8,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,4,3,4,51,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,3,5,60,8,5,1,5,
		1,5,1,5,1,6,1,6,1,7,1,7,3,7,69,8,7,1,7,0,0,8,0,2,4,6,8,10,12,14,0,0,71,
		0,19,1,0,0,0,2,26,1,0,0,0,4,29,1,0,0,0,6,39,1,0,0,0,8,50,1,0,0,0,10,59,
		1,0,0,0,12,64,1,0,0,0,14,68,1,0,0,0,16,18,3,2,1,0,17,16,1,0,0,0,18,21,
		1,0,0,0,19,17,1,0,0,0,19,20,1,0,0,0,20,1,1,0,0,0,21,19,1,0,0,0,22,27,3,
		4,2,0,23,27,3,6,3,0,24,27,3,8,4,0,25,27,3,10,5,0,26,22,1,0,0,0,26,23,1,
		0,0,0,26,24,1,0,0,0,26,25,1,0,0,0,27,3,1,0,0,0,28,30,3,12,6,0,29,28,1,
		0,0,0,29,30,1,0,0,0,30,31,1,0,0,0,31,32,5,3,0,0,32,33,5,2,0,0,33,34,5,
		27,0,0,34,35,5,2,0,0,35,36,5,27,0,0,36,37,5,2,0,0,37,5,1,0,0,0,38,40,3,
		12,6,0,39,38,1,0,0,0,39,40,1,0,0,0,40,41,1,0,0,0,41,42,5,4,0,0,42,43,5,
		2,0,0,43,44,5,27,0,0,44,45,3,14,7,0,45,46,5,28,0,0,46,47,5,2,0,0,47,48,
		5,29,0,0,48,7,1,0,0,0,49,51,3,12,6,0,50,49,1,0,0,0,50,51,1,0,0,0,51,52,
		1,0,0,0,52,53,5,5,0,0,53,54,3,14,7,0,54,55,5,28,0,0,55,56,5,2,0,0,56,57,
		5,29,0,0,57,9,1,0,0,0,58,60,3,12,6,0,59,58,1,0,0,0,59,60,1,0,0,0,60,61,
		1,0,0,0,61,62,5,1,0,0,62,63,5,30,0,0,63,11,1,0,0,0,64,65,5,31,0,0,65,13,
		1,0,0,0,66,69,5,30,0,0,67,69,5,31,0,0,68,66,1,0,0,0,68,67,1,0,0,0,69,15,
		1,0,0,0,7,19,26,29,39,50,59,68
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
