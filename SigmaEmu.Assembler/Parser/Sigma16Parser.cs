//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Parser\Sigma16.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class Sigma16Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, REG=2, RRR_COMMAND=3, RX_COMMAND=4, ADD=5, SUB=6, MUL=7, DIV=8, 
		TRAP=9, LEA=10, LOAD=11, STORE=12, COMMA=13, LBRACK=14, RBRACK=15, SPACE=16, 
		EOL=17, COMMENT=18, NUM=19, LABEL=20;
	public const int
		RULE_program = 0, RULE_instruction = 1, RULE_rrr_instruction = 2, RULE_rx_instruction = 3, 
		RULE_data_instruction = 4, RULE_label_def = 5, RULE_x = 6;
	public static readonly string[] ruleNames = {
		"program", "instruction", "rrr_instruction", "rx_instruction", "data_instruction", 
		"label_def", "x"
	};

	private static readonly string[] _LiteralNames = {
		null, "'data'", null, null, null, "'add'", "'sub'", "'mul'", "'div'", 
		"'trap'", "'lea'", "'load'", "'store'", "','", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "REG", "RRR_COMMAND", "RX_COMMAND", "ADD", "SUB", "MUL", "DIV", 
		"TRAP", "LEA", "LOAD", "STORE", "COMMA", "LBRACK", "RBRACK", "SPACE", 
		"EOL", "COMMENT", "NUM", "LABEL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sigma16.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Sigma16Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Sigma16Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Sigma16Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1048600L) != 0) {
				{
				{
				State = 14;
				instruction();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_defContext label_def() {
			return GetRuleContext<Label_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rrr_instructionContext rrr_instruction() {
			return GetRuleContext<Rrr_instructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rx_instructionContext rx_instruction() {
			return GetRuleContext<Rx_instructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_instructionContext data_instruction() {
			return GetRuleContext<Data_instructionContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 2, RULE_instruction);
		try {
			State = 24;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 20;
				label_def();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 21;
				rrr_instruction();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 22;
				rx_instruction();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 23;
				data_instruction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rrr_instructionContext : ParserRuleContext {
		public IToken destinationReg;
		public IToken firstOperand;
		public IToken secondOperand;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRR_COMMAND() { return GetToken(Sigma16Parser.RRR_COMMAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Sigma16Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Sigma16Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REG() { return GetTokens(Sigma16Parser.REG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG(int i) {
			return GetToken(Sigma16Parser.REG, i);
		}
		public Rrr_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rrr_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterRrr_instruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitRrr_instruction(this);
		}
	}

	[RuleVersion(0)]
	public Rrr_instructionContext rrr_instruction() {
		Rrr_instructionContext _localctx = new Rrr_instructionContext(Context, State);
		EnterRule(_localctx, 4, RULE_rrr_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			Match(RRR_COMMAND);
			State = 27;
			_localctx.destinationReg = Match(REG);
			State = 28;
			Match(COMMA);
			State = 29;
			_localctx.firstOperand = Match(REG);
			State = 30;
			Match(COMMA);
			State = 31;
			_localctx.secondOperand = Match(REG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rx_instructionContext : ParserRuleContext {
		public IToken r;
		public IToken offsetReg;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RX_COMMAND() { return GetToken(Sigma16Parser.RX_COMMAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Sigma16Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XContext x() {
			return GetRuleContext<XContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(Sigma16Parser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(Sigma16Parser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REG() { return GetTokens(Sigma16Parser.REG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG(int i) {
			return GetToken(Sigma16Parser.REG, i);
		}
		public Rx_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rx_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterRx_instruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitRx_instruction(this);
		}
	}

	[RuleVersion(0)]
	public Rx_instructionContext rx_instruction() {
		Rx_instructionContext _localctx = new Rx_instructionContext(Context, State);
		EnterRule(_localctx, 6, RULE_rx_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			Match(RX_COMMAND);
			State = 34;
			_localctx.r = Match(REG);
			State = 35;
			Match(COMMA);
			State = 36;
			x();
			State = 37;
			Match(LBRACK);
			State = 38;
			_localctx.offsetReg = Match(REG);
			State = 39;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_instructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_defContext label_def() {
			return GetRuleContext<Label_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(Sigma16Parser.NUM, 0); }
		public Data_instructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterData_instruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitData_instruction(this);
		}
	}

	[RuleVersion(0)]
	public Data_instructionContext data_instruction() {
		Data_instructionContext _localctx = new Data_instructionContext(Context, State);
		EnterRule(_localctx, 8, RULE_data_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			label_def();
			State = 42;
			Match(T__0);
			State = 43;
			Match(NUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(Sigma16Parser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(Sigma16Parser.EOL, 0); }
		public Label_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterLabel_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitLabel_def(this);
		}
	}

	[RuleVersion(0)]
	public Label_defContext label_def() {
		Label_defContext _localctx = new Label_defContext(Context, State);
		EnterRule(_localctx, 10, RULE_label_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(LABEL);
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 46;
				Match(EOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(Sigma16Parser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(Sigma16Parser.LABEL, 0); }
		public XContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_x; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.EnterX(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISigma16Listener typedListener = listener as ISigma16Listener;
			if (typedListener != null) typedListener.ExitX(this);
		}
	}

	[RuleVersion(0)]
	public XContext x() {
		XContext _localctx = new XContext(Context, State);
		EnterRule(_localctx, 12, RULE_x);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			_la = TokenStream.LA(1);
			if ( !(_la==NUM || _la==LABEL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,20,52,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,1,0,
		5,0,16,8,0,10,0,12,0,19,9,0,1,1,1,1,1,1,1,1,3,1,25,8,1,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,3,
		5,48,8,5,1,6,1,6,1,6,0,0,7,0,2,4,6,8,10,12,0,1,1,0,19,20,49,0,17,1,0,0,
		0,2,24,1,0,0,0,4,26,1,0,0,0,6,33,1,0,0,0,8,41,1,0,0,0,10,45,1,0,0,0,12,
		49,1,0,0,0,14,16,3,2,1,0,15,14,1,0,0,0,16,19,1,0,0,0,17,15,1,0,0,0,17,
		18,1,0,0,0,18,1,1,0,0,0,19,17,1,0,0,0,20,25,3,10,5,0,21,25,3,4,2,0,22,
		25,3,6,3,0,23,25,3,8,4,0,24,20,1,0,0,0,24,21,1,0,0,0,24,22,1,0,0,0,24,
		23,1,0,0,0,25,3,1,0,0,0,26,27,5,3,0,0,27,28,5,2,0,0,28,29,5,13,0,0,29,
		30,5,2,0,0,30,31,5,13,0,0,31,32,5,2,0,0,32,5,1,0,0,0,33,34,5,4,0,0,34,
		35,5,2,0,0,35,36,5,13,0,0,36,37,3,12,6,0,37,38,5,14,0,0,38,39,5,2,0,0,
		39,40,5,15,0,0,40,7,1,0,0,0,41,42,3,10,5,0,42,43,5,1,0,0,43,44,5,19,0,
		0,44,9,1,0,0,0,45,47,5,20,0,0,46,48,5,17,0,0,47,46,1,0,0,0,47,48,1,0,0,
		0,48,11,1,0,0,0,49,50,7,0,0,0,50,13,1,0,0,0,3,17,24,47
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
