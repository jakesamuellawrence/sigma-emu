//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Sigma16.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class Sigma16Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		RRR_COMMAND=1, RX_COMMAND=2, REG=3, ADD=4, SUB=5, MUL=6, DIV=7, TRAP=8, 
		LEA=9, LOAD=10, STORE=11, NUM=12, LABEL=13, COMMA=14, LBRACK=15, RBRACK=16, 
		SPACE=17, EOL=18, COMMENT=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"RRR_COMMAND", "RX_COMMAND", "REG", "ADD", "SUB", "MUL", "DIV", "TRAP", 
		"LEA", "LOAD", "STORE", "NUM", "LABEL", "COMMA", "LBRACK", "RBRACK", "SPACE", 
		"EOL", "COMMENT", "LETTER", "DIGIT"
	};


	public Sigma16Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Sigma16Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'add'", "'sub'", "'mul'", "'div'", "'trap'", 
		"'lea'", "'load'", "'store'", null, null, "','", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RRR_COMMAND", "RX_COMMAND", "REG", "ADD", "SUB", "MUL", "DIV", 
		"TRAP", "LEA", "LOAD", "STORE", "NUM", "LABEL", "COMMA", "LBRACK", "RBRACK", 
		"SPACE", "EOL", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sigma16.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Sigma16Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,19,145,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,
		0,1,0,1,0,1,0,3,0,49,8,0,1,1,1,1,1,1,3,1,54,8,1,1,2,1,2,1,2,1,3,1,3,1,
		3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
		1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
		1,11,4,11,96,8,11,11,11,12,11,97,1,12,1,12,1,12,5,12,103,8,12,10,12,12,
		12,106,9,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,4,16,115,8,16,11,16,12,
		16,116,1,16,1,16,1,17,3,17,122,8,17,1,17,1,17,1,17,1,17,1,18,1,18,5,18,
		130,8,18,10,18,12,18,133,9,18,1,18,3,18,136,8,18,1,18,1,18,1,18,1,18,1,
		19,1,19,1,20,1,20,0,0,21,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,0,41,0,1,0,3,
		2,0,9,9,32,32,2,0,10,10,13,13,2,0,65,90,97,122,155,0,1,1,0,0,0,0,3,1,0,
		0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
		1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
		0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,1,48,1,0,0,0,3,53,1,0,0,0,5,55,1,0,0,0,7,58,1,0,0,0,9,62,1,0,0,
		0,11,66,1,0,0,0,13,70,1,0,0,0,15,74,1,0,0,0,17,79,1,0,0,0,19,83,1,0,0,
		0,21,88,1,0,0,0,23,95,1,0,0,0,25,99,1,0,0,0,27,107,1,0,0,0,29,109,1,0,
		0,0,31,111,1,0,0,0,33,114,1,0,0,0,35,121,1,0,0,0,37,127,1,0,0,0,39,141,
		1,0,0,0,41,143,1,0,0,0,43,49,3,7,3,0,44,49,3,9,4,0,45,49,3,11,5,0,46,49,
		3,13,6,0,47,49,3,15,7,0,48,43,1,0,0,0,48,44,1,0,0,0,48,45,1,0,0,0,48,46,
		1,0,0,0,48,47,1,0,0,0,49,2,1,0,0,0,50,54,3,17,8,0,51,54,3,19,9,0,52,54,
		3,21,10,0,53,50,1,0,0,0,53,51,1,0,0,0,53,52,1,0,0,0,54,4,1,0,0,0,55,56,
		5,82,0,0,56,57,3,23,11,0,57,6,1,0,0,0,58,59,5,97,0,0,59,60,5,100,0,0,60,
		61,5,100,0,0,61,8,1,0,0,0,62,63,5,115,0,0,63,64,5,117,0,0,64,65,5,98,0,
		0,65,10,1,0,0,0,66,67,5,109,0,0,67,68,5,117,0,0,68,69,5,108,0,0,69,12,
		1,0,0,0,70,71,5,100,0,0,71,72,5,105,0,0,72,73,5,118,0,0,73,14,1,0,0,0,
		74,75,5,116,0,0,75,76,5,114,0,0,76,77,5,97,0,0,77,78,5,112,0,0,78,16,1,
		0,0,0,79,80,5,108,0,0,80,81,5,101,0,0,81,82,5,97,0,0,82,18,1,0,0,0,83,
		84,5,108,0,0,84,85,5,111,0,0,85,86,5,97,0,0,86,87,5,100,0,0,87,20,1,0,
		0,0,88,89,5,115,0,0,89,90,5,116,0,0,90,91,5,111,0,0,91,92,5,114,0,0,92,
		93,5,101,0,0,93,22,1,0,0,0,94,96,3,41,20,0,95,94,1,0,0,0,96,97,1,0,0,0,
		97,95,1,0,0,0,97,98,1,0,0,0,98,24,1,0,0,0,99,104,3,39,19,0,100,103,3,39,
		19,0,101,103,3,41,20,0,102,100,1,0,0,0,102,101,1,0,0,0,103,106,1,0,0,0,
		104,102,1,0,0,0,104,105,1,0,0,0,105,26,1,0,0,0,106,104,1,0,0,0,107,108,
		5,44,0,0,108,28,1,0,0,0,109,110,5,91,0,0,110,30,1,0,0,0,111,112,5,93,0,
		0,112,32,1,0,0,0,113,115,7,0,0,0,114,113,1,0,0,0,115,116,1,0,0,0,116,114,
		1,0,0,0,116,117,1,0,0,0,117,118,1,0,0,0,118,119,6,16,0,0,119,34,1,0,0,
		0,120,122,5,13,0,0,121,120,1,0,0,0,121,122,1,0,0,0,122,123,1,0,0,0,123,
		124,5,10,0,0,124,125,1,0,0,0,125,126,6,17,0,0,126,36,1,0,0,0,127,131,5,
		59,0,0,128,130,8,1,0,0,129,128,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,
		131,132,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,134,136,5,13,0,0,135,134,
		1,0,0,0,135,136,1,0,0,0,136,137,1,0,0,0,137,138,5,10,0,0,138,139,1,0,0,
		0,139,140,6,18,0,0,140,38,1,0,0,0,141,142,7,2,0,0,142,40,1,0,0,0,143,144,
		2,48,57,0,144,42,1,0,0,0,10,0,48,53,97,102,104,116,121,131,135,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
