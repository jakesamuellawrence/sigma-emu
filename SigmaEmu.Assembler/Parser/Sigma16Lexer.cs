//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Parser\Sigma16.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class Sigma16Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, REG=2, RRR_COMMAND=3, RX_COMMAND=4, ADD=5, SUB=6, MUL=7, DIV=8, 
		TRAP=9, LEA=10, LOAD=11, STORE=12, COMMA=13, LBRACK=14, RBRACK=15, NUM=16, 
		LABEL=17, SPACE=18, EOL=19, COMMENT=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "REG", "RRR_COMMAND", "RX_COMMAND", "ADD", "SUB", "MUL", "DIV", 
		"TRAP", "LEA", "LOAD", "STORE", "COMMA", "LBRACK", "RBRACK", "NUM", "LABEL", 
		"SPACE", "EOL", "COMMENT", "LETTER", "DIGIT"
	};


	public Sigma16Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Sigma16Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'data'", null, null, null, "'add'", "'sub'", "'mul'", "'div'", 
		"'trap'", "'lea'", "'load'", "'store'", "','", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "REG", "RRR_COMMAND", "RX_COMMAND", "ADD", "SUB", "MUL", "DIV", 
		"TRAP", "LEA", "LOAD", "STORE", "COMMA", "LBRACK", "RBRACK", "NUM", "LABEL", 
		"SPACE", "EOL", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sigma16.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Sigma16Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,20,190,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,89,8,1,1,2,1,2,1,2,1,2,1,2,3,2,
		96,8,2,1,3,1,3,1,3,3,3,101,8,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,
		1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,
		1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,
		1,14,1,15,4,15,146,8,15,11,15,12,15,147,1,16,1,16,1,16,1,16,5,16,154,8,
		16,10,16,12,16,157,9,16,1,17,4,17,160,8,17,11,17,12,17,161,1,17,1,17,1,
		18,3,18,167,8,18,1,18,1,18,1,18,1,18,1,19,1,19,5,19,175,8,19,10,19,12,
		19,178,9,19,1,19,3,19,181,8,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,
		0,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
		27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,0,43,0,1,0,4,1,0,95,95,2,
		0,9,9,32,32,2,0,10,10,13,13,2,0,65,90,97,122,216,0,1,1,0,0,0,0,3,1,0,0,
		0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
		0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
		0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,1,45,1,0,0,0,3,88,1,0,0,0,5,95,1,0,0,0,7,100,1,0,
		0,0,9,102,1,0,0,0,11,106,1,0,0,0,13,110,1,0,0,0,15,114,1,0,0,0,17,118,
		1,0,0,0,19,123,1,0,0,0,21,127,1,0,0,0,23,132,1,0,0,0,25,138,1,0,0,0,27,
		140,1,0,0,0,29,142,1,0,0,0,31,145,1,0,0,0,33,149,1,0,0,0,35,159,1,0,0,
		0,37,166,1,0,0,0,39,172,1,0,0,0,41,186,1,0,0,0,43,188,1,0,0,0,45,46,5,
		100,0,0,46,47,5,97,0,0,47,48,5,116,0,0,48,49,5,97,0,0,49,2,1,0,0,0,50,
		51,5,82,0,0,51,89,5,48,0,0,52,53,5,82,0,0,53,89,5,49,0,0,54,55,5,82,0,
		0,55,89,5,50,0,0,56,57,5,82,0,0,57,89,5,51,0,0,58,59,5,82,0,0,59,89,5,
		52,0,0,60,61,5,82,0,0,61,89,5,53,0,0,62,63,5,82,0,0,63,89,5,54,0,0,64,
		65,5,82,0,0,65,89,5,55,0,0,66,67,5,82,0,0,67,89,5,56,0,0,68,69,5,82,0,
		0,69,89,5,57,0,0,70,71,5,82,0,0,71,72,5,49,0,0,72,89,5,48,0,0,73,74,5,
		82,0,0,74,75,5,49,0,0,75,89,5,49,0,0,76,77,5,82,0,0,77,78,5,49,0,0,78,
		89,5,50,0,0,79,80,5,82,0,0,80,81,5,49,0,0,81,89,5,51,0,0,82,83,5,82,0,
		0,83,84,5,49,0,0,84,89,5,52,0,0,85,86,5,82,0,0,86,87,5,49,0,0,87,89,5,
		53,0,0,88,50,1,0,0,0,88,52,1,0,0,0,88,54,1,0,0,0,88,56,1,0,0,0,88,58,1,
		0,0,0,88,60,1,0,0,0,88,62,1,0,0,0,88,64,1,0,0,0,88,66,1,0,0,0,88,68,1,
		0,0,0,88,70,1,0,0,0,88,73,1,0,0,0,88,76,1,0,0,0,88,79,1,0,0,0,88,82,1,
		0,0,0,88,85,1,0,0,0,89,4,1,0,0,0,90,96,3,9,4,0,91,96,3,11,5,0,92,96,3,
		13,6,0,93,96,3,15,7,0,94,96,3,17,8,0,95,90,1,0,0,0,95,91,1,0,0,0,95,92,
		1,0,0,0,95,93,1,0,0,0,95,94,1,0,0,0,96,6,1,0,0,0,97,101,3,19,9,0,98,101,
		3,21,10,0,99,101,3,23,11,0,100,97,1,0,0,0,100,98,1,0,0,0,100,99,1,0,0,
		0,101,8,1,0,0,0,102,103,5,97,0,0,103,104,5,100,0,0,104,105,5,100,0,0,105,
		10,1,0,0,0,106,107,5,115,0,0,107,108,5,117,0,0,108,109,5,98,0,0,109,12,
		1,0,0,0,110,111,5,109,0,0,111,112,5,117,0,0,112,113,5,108,0,0,113,14,1,
		0,0,0,114,115,5,100,0,0,115,116,5,105,0,0,116,117,5,118,0,0,117,16,1,0,
		0,0,118,119,5,116,0,0,119,120,5,114,0,0,120,121,5,97,0,0,121,122,5,112,
		0,0,122,18,1,0,0,0,123,124,5,108,0,0,124,125,5,101,0,0,125,126,5,97,0,
		0,126,20,1,0,0,0,127,128,5,108,0,0,128,129,5,111,0,0,129,130,5,97,0,0,
		130,131,5,100,0,0,131,22,1,0,0,0,132,133,5,115,0,0,133,134,5,116,0,0,134,
		135,5,111,0,0,135,136,5,114,0,0,136,137,5,101,0,0,137,24,1,0,0,0,138,139,
		5,44,0,0,139,26,1,0,0,0,140,141,5,91,0,0,141,28,1,0,0,0,142,143,5,93,0,
		0,143,30,1,0,0,0,144,146,3,43,21,0,145,144,1,0,0,0,146,147,1,0,0,0,147,
		145,1,0,0,0,147,148,1,0,0,0,148,32,1,0,0,0,149,155,3,41,20,0,150,154,3,
		41,20,0,151,154,7,0,0,0,152,154,3,43,21,0,153,150,1,0,0,0,153,151,1,0,
		0,0,153,152,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,
		34,1,0,0,0,157,155,1,0,0,0,158,160,7,1,0,0,159,158,1,0,0,0,160,161,1,0,
		0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,163,1,0,0,0,163,164,6,17,0,0,164,
		36,1,0,0,0,165,167,5,13,0,0,166,165,1,0,0,0,166,167,1,0,0,0,167,168,1,
		0,0,0,168,169,5,10,0,0,169,170,1,0,0,0,170,171,6,18,0,0,171,38,1,0,0,0,
		172,176,5,59,0,0,173,175,8,2,0,0,174,173,1,0,0,0,175,178,1,0,0,0,176,174,
		1,0,0,0,176,177,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,0,179,181,5,13,0,
		0,180,179,1,0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,183,5,10,0,0,183,
		184,1,0,0,0,184,185,6,19,0,0,185,40,1,0,0,0,186,187,7,3,0,0,187,42,1,0,
		0,0,188,189,2,48,57,0,189,44,1,0,0,0,11,0,88,95,100,147,153,155,161,166,
		176,180,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
