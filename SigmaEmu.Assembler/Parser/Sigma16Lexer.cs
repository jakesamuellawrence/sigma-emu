//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Parser\Sigma16.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class Sigma16Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, REG=2, RRR_COMMAND=3, RX_COMMAND=4, ADD=5, SUB=6, MUL=7, DIV=8, 
		CMPLT=9, CMPEQ=10, CMPGT=11, INV=12, AND=13, OR=14, XOR=15, TRAP=16, LEA=17, 
		LOAD=18, STORE=19, COMMA=20, LBRACK=21, RBRACK=22, NUM=23, LABEL=24, SPACE=25, 
		EOL=26, COMMENT=27;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "REG", "RRR_COMMAND", "RX_COMMAND", "ADD", "SUB", "MUL", "DIV", 
		"CMPLT", "CMPEQ", "CMPGT", "INV", "AND", "OR", "XOR", "TRAP", "LEA", "LOAD", 
		"STORE", "COMMA", "LBRACK", "RBRACK", "NUM", "LABEL", "SPACE", "EOL", 
		"COMMENT", "LETTER", "DIGIT"
	};


	public Sigma16Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Sigma16Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'data'", null, null, null, "'add'", "'sub'", "'mul'", "'div'", 
		"'cmplt'", "'cmpeq'", "'cmpgt'", "'inv'", "'and'", "'or'", "'xor'", "'trap'", 
		"'lea'", "'load'", "'store'", "','", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "REG", "RRR_COMMAND", "RX_COMMAND", "ADD", "SUB", "MUL", "DIV", 
		"CMPLT", "CMPEQ", "CMPGT", "INV", "AND", "OR", "XOR", "TRAP", "LEA", "LOAD", 
		"STORE", "COMMA", "LBRACK", "RBRACK", "NUM", "LABEL", "SPACE", "EOL", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sigma16.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Sigma16Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,27,244,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,103,8,1,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,117,8,2,1,3,1,3,1,3,3,3,122,8,3,1,4,1,4,
		1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
		8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,
		11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
		15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,
		18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,4,22,200,
		8,22,11,22,12,22,201,1,23,1,23,1,23,1,23,5,23,208,8,23,10,23,12,23,211,
		9,23,1,24,4,24,214,8,24,11,24,12,24,215,1,24,1,24,1,25,3,25,221,8,25,1,
		25,1,25,1,25,1,25,1,26,1,26,5,26,229,8,26,10,26,12,26,232,9,26,1,26,3,
		26,235,8,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,0,0,29,1,1,3,2,5,3,
		7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,0,
		57,0,1,0,4,1,0,95,95,2,0,9,9,32,32,2,0,10,10,13,13,2,0,65,90,97,122,277,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,59,1,0,0,
		0,3,102,1,0,0,0,5,116,1,0,0,0,7,121,1,0,0,0,9,123,1,0,0,0,11,127,1,0,0,
		0,13,131,1,0,0,0,15,135,1,0,0,0,17,139,1,0,0,0,19,145,1,0,0,0,21,151,1,
		0,0,0,23,157,1,0,0,0,25,161,1,0,0,0,27,165,1,0,0,0,29,168,1,0,0,0,31,172,
		1,0,0,0,33,177,1,0,0,0,35,181,1,0,0,0,37,186,1,0,0,0,39,192,1,0,0,0,41,
		194,1,0,0,0,43,196,1,0,0,0,45,199,1,0,0,0,47,203,1,0,0,0,49,213,1,0,0,
		0,51,220,1,0,0,0,53,226,1,0,0,0,55,240,1,0,0,0,57,242,1,0,0,0,59,60,5,
		100,0,0,60,61,5,97,0,0,61,62,5,116,0,0,62,63,5,97,0,0,63,2,1,0,0,0,64,
		65,5,82,0,0,65,103,5,48,0,0,66,67,5,82,0,0,67,103,5,49,0,0,68,69,5,82,
		0,0,69,103,5,50,0,0,70,71,5,82,0,0,71,103,5,51,0,0,72,73,5,82,0,0,73,103,
		5,52,0,0,74,75,5,82,0,0,75,103,5,53,0,0,76,77,5,82,0,0,77,103,5,54,0,0,
		78,79,5,82,0,0,79,103,5,55,0,0,80,81,5,82,0,0,81,103,5,56,0,0,82,83,5,
		82,0,0,83,103,5,57,0,0,84,85,5,82,0,0,85,86,5,49,0,0,86,103,5,48,0,0,87,
		88,5,82,0,0,88,89,5,49,0,0,89,103,5,49,0,0,90,91,5,82,0,0,91,92,5,49,0,
		0,92,103,5,50,0,0,93,94,5,82,0,0,94,95,5,49,0,0,95,103,5,51,0,0,96,97,
		5,82,0,0,97,98,5,49,0,0,98,103,5,52,0,0,99,100,5,82,0,0,100,101,5,49,0,
		0,101,103,5,53,0,0,102,64,1,0,0,0,102,66,1,0,0,0,102,68,1,0,0,0,102,70,
		1,0,0,0,102,72,1,0,0,0,102,74,1,0,0,0,102,76,1,0,0,0,102,78,1,0,0,0,102,
		80,1,0,0,0,102,82,1,0,0,0,102,84,1,0,0,0,102,87,1,0,0,0,102,90,1,0,0,0,
		102,93,1,0,0,0,102,96,1,0,0,0,102,99,1,0,0,0,103,4,1,0,0,0,104,117,3,9,
		4,0,105,117,3,11,5,0,106,117,3,13,6,0,107,117,3,15,7,0,108,117,3,17,8,
		0,109,117,3,19,9,0,110,117,3,21,10,0,111,117,3,23,11,0,112,117,3,25,12,
		0,113,117,3,27,13,0,114,117,3,29,14,0,115,117,3,31,15,0,116,104,1,0,0,
		0,116,105,1,0,0,0,116,106,1,0,0,0,116,107,1,0,0,0,116,108,1,0,0,0,116,
		109,1,0,0,0,116,110,1,0,0,0,116,111,1,0,0,0,116,112,1,0,0,0,116,113,1,
		0,0,0,116,114,1,0,0,0,116,115,1,0,0,0,117,6,1,0,0,0,118,122,3,33,16,0,
		119,122,3,35,17,0,120,122,3,37,18,0,121,118,1,0,0,0,121,119,1,0,0,0,121,
		120,1,0,0,0,122,8,1,0,0,0,123,124,5,97,0,0,124,125,5,100,0,0,125,126,5,
		100,0,0,126,10,1,0,0,0,127,128,5,115,0,0,128,129,5,117,0,0,129,130,5,98,
		0,0,130,12,1,0,0,0,131,132,5,109,0,0,132,133,5,117,0,0,133,134,5,108,0,
		0,134,14,1,0,0,0,135,136,5,100,0,0,136,137,5,105,0,0,137,138,5,118,0,0,
		138,16,1,0,0,0,139,140,5,99,0,0,140,141,5,109,0,0,141,142,5,112,0,0,142,
		143,5,108,0,0,143,144,5,116,0,0,144,18,1,0,0,0,145,146,5,99,0,0,146,147,
		5,109,0,0,147,148,5,112,0,0,148,149,5,101,0,0,149,150,5,113,0,0,150,20,
		1,0,0,0,151,152,5,99,0,0,152,153,5,109,0,0,153,154,5,112,0,0,154,155,5,
		103,0,0,155,156,5,116,0,0,156,22,1,0,0,0,157,158,5,105,0,0,158,159,5,110,
		0,0,159,160,5,118,0,0,160,24,1,0,0,0,161,162,5,97,0,0,162,163,5,110,0,
		0,163,164,5,100,0,0,164,26,1,0,0,0,165,166,5,111,0,0,166,167,5,114,0,0,
		167,28,1,0,0,0,168,169,5,120,0,0,169,170,5,111,0,0,170,171,5,114,0,0,171,
		30,1,0,0,0,172,173,5,116,0,0,173,174,5,114,0,0,174,175,5,97,0,0,175,176,
		5,112,0,0,176,32,1,0,0,0,177,178,5,108,0,0,178,179,5,101,0,0,179,180,5,
		97,0,0,180,34,1,0,0,0,181,182,5,108,0,0,182,183,5,111,0,0,183,184,5,97,
		0,0,184,185,5,100,0,0,185,36,1,0,0,0,186,187,5,115,0,0,187,188,5,116,0,
		0,188,189,5,111,0,0,189,190,5,114,0,0,190,191,5,101,0,0,191,38,1,0,0,0,
		192,193,5,44,0,0,193,40,1,0,0,0,194,195,5,91,0,0,195,42,1,0,0,0,196,197,
		5,93,0,0,197,44,1,0,0,0,198,200,3,57,28,0,199,198,1,0,0,0,200,201,1,0,
		0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,46,1,0,0,0,203,209,3,55,27,0,204,
		208,3,55,27,0,205,208,7,0,0,0,206,208,3,57,28,0,207,204,1,0,0,0,207,205,
		1,0,0,0,207,206,1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,
		0,210,48,1,0,0,0,211,209,1,0,0,0,212,214,7,1,0,0,213,212,1,0,0,0,214,215,
		1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,217,218,6,24,0,
		0,218,50,1,0,0,0,219,221,5,13,0,0,220,219,1,0,0,0,220,221,1,0,0,0,221,
		222,1,0,0,0,222,223,5,10,0,0,223,224,1,0,0,0,224,225,6,25,0,0,225,52,1,
		0,0,0,226,230,5,59,0,0,227,229,8,2,0,0,228,227,1,0,0,0,229,232,1,0,0,0,
		230,228,1,0,0,0,230,231,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,233,235,
		5,13,0,0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,237,5,10,
		0,0,237,238,1,0,0,0,238,239,6,26,0,0,239,54,1,0,0,0,240,241,7,3,0,0,241,
		56,1,0,0,0,242,243,2,48,57,0,243,58,1,0,0,0,11,0,102,116,121,201,207,209,
		215,220,230,234,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
