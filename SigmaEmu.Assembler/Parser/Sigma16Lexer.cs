//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Parser\Sigma16.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class Sigma16Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, REG=2, RRR_COMMAND=3, RX_COMMAND=4, ADD=5, SUB=6, MUL=7, DIV=8, 
		CMPLT=9, CMPEQ=10, CMPGT=11, INV=12, AND=13, OR=14, XOR=15, SHIFTL=16, 
		SHIFTR=17, TRAP=18, LEA=19, LOAD=20, STORE=21, COMMA=22, LBRACK=23, RBRACK=24, 
		NUM=25, LABEL=26, SPACE=27, EOL=28, COMMENT=29;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "REG", "RRR_COMMAND", "RX_COMMAND", "ADD", "SUB", "MUL", "DIV", 
		"CMPLT", "CMPEQ", "CMPGT", "INV", "AND", "OR", "XOR", "SHIFTL", "SHIFTR", 
		"TRAP", "LEA", "LOAD", "STORE", "COMMA", "LBRACK", "RBRACK", "NUM", "LABEL", 
		"SPACE", "EOL", "COMMENT", "LETTER", "DIGIT"
	};


	public Sigma16Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Sigma16Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'data'", null, null, null, "'add'", "'sub'", "'mul'", "'div'", 
		"'cmplt'", "'cmpeq'", "'cmpgt'", "'inv'", "'and'", "'or'", "'xor'", "'shiftl'", 
		"'shiftr'", "'trap'", "'lea'", "'load'", "'store'", "','", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "REG", "RRR_COMMAND", "RX_COMMAND", "ADD", "SUB", "MUL", "DIV", 
		"CMPLT", "CMPEQ", "CMPGT", "INV", "AND", "OR", "XOR", "SHIFTL", "SHIFTR", 
		"TRAP", "LEA", "LOAD", "STORE", "COMMA", "LBRACK", "RBRACK", "NUM", "LABEL", 
		"SPACE", "EOL", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sigma16.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Sigma16Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,29,264,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,107,8,1,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,123,8,2,1,3,
		1,3,1,3,3,3,128,8,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
		7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
		1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,
		1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
		1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,
		1,22,1,23,1,23,1,24,4,24,220,8,24,11,24,12,24,221,1,25,1,25,1,25,1,25,
		5,25,228,8,25,10,25,12,25,231,9,25,1,26,4,26,234,8,26,11,26,12,26,235,
		1,26,1,26,1,27,3,27,241,8,27,1,27,1,27,1,27,1,27,1,28,1,28,5,28,249,8,
		28,10,28,12,28,252,9,28,1,28,3,28,255,8,28,1,28,1,28,1,28,1,28,1,29,1,
		29,1,30,1,30,0,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
		23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
		47,24,49,25,51,26,53,27,55,28,57,29,59,0,61,0,1,0,4,1,0,95,95,2,0,9,9,
		32,32,2,0,10,10,13,13,2,0,65,90,97,122,299,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
		1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
		0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
		0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,63,1,0,0,
		0,3,106,1,0,0,0,5,122,1,0,0,0,7,127,1,0,0,0,9,129,1,0,0,0,11,133,1,0,0,
		0,13,137,1,0,0,0,15,141,1,0,0,0,17,145,1,0,0,0,19,151,1,0,0,0,21,157,1,
		0,0,0,23,163,1,0,0,0,25,167,1,0,0,0,27,171,1,0,0,0,29,174,1,0,0,0,31,178,
		1,0,0,0,33,185,1,0,0,0,35,192,1,0,0,0,37,197,1,0,0,0,39,201,1,0,0,0,41,
		206,1,0,0,0,43,212,1,0,0,0,45,214,1,0,0,0,47,216,1,0,0,0,49,219,1,0,0,
		0,51,223,1,0,0,0,53,233,1,0,0,0,55,240,1,0,0,0,57,246,1,0,0,0,59,260,1,
		0,0,0,61,262,1,0,0,0,63,64,5,100,0,0,64,65,5,97,0,0,65,66,5,116,0,0,66,
		67,5,97,0,0,67,2,1,0,0,0,68,69,5,82,0,0,69,107,5,48,0,0,70,71,5,82,0,0,
		71,107,5,49,0,0,72,73,5,82,0,0,73,107,5,50,0,0,74,75,5,82,0,0,75,107,5,
		51,0,0,76,77,5,82,0,0,77,107,5,52,0,0,78,79,5,82,0,0,79,107,5,53,0,0,80,
		81,5,82,0,0,81,107,5,54,0,0,82,83,5,82,0,0,83,107,5,55,0,0,84,85,5,82,
		0,0,85,107,5,56,0,0,86,87,5,82,0,0,87,107,5,57,0,0,88,89,5,82,0,0,89,90,
		5,49,0,0,90,107,5,48,0,0,91,92,5,82,0,0,92,93,5,49,0,0,93,107,5,49,0,0,
		94,95,5,82,0,0,95,96,5,49,0,0,96,107,5,50,0,0,97,98,5,82,0,0,98,99,5,49,
		0,0,99,107,5,51,0,0,100,101,5,82,0,0,101,102,5,49,0,0,102,107,5,52,0,0,
		103,104,5,82,0,0,104,105,5,49,0,0,105,107,5,53,0,0,106,68,1,0,0,0,106,
		70,1,0,0,0,106,72,1,0,0,0,106,74,1,0,0,0,106,76,1,0,0,0,106,78,1,0,0,0,
		106,80,1,0,0,0,106,82,1,0,0,0,106,84,1,0,0,0,106,86,1,0,0,0,106,88,1,0,
		0,0,106,91,1,0,0,0,106,94,1,0,0,0,106,97,1,0,0,0,106,100,1,0,0,0,106,103,
		1,0,0,0,107,4,1,0,0,0,108,123,3,9,4,0,109,123,3,11,5,0,110,123,3,13,6,
		0,111,123,3,15,7,0,112,123,3,17,8,0,113,123,3,19,9,0,114,123,3,21,10,0,
		115,123,3,23,11,0,116,123,3,25,12,0,117,123,3,27,13,0,118,123,3,29,14,
		0,119,123,3,31,15,0,120,123,3,33,16,0,121,123,3,35,17,0,122,108,1,0,0,
		0,122,109,1,0,0,0,122,110,1,0,0,0,122,111,1,0,0,0,122,112,1,0,0,0,122,
		113,1,0,0,0,122,114,1,0,0,0,122,115,1,0,0,0,122,116,1,0,0,0,122,117,1,
		0,0,0,122,118,1,0,0,0,122,119,1,0,0,0,122,120,1,0,0,0,122,121,1,0,0,0,
		123,6,1,0,0,0,124,128,3,37,18,0,125,128,3,39,19,0,126,128,3,41,20,0,127,
		124,1,0,0,0,127,125,1,0,0,0,127,126,1,0,0,0,128,8,1,0,0,0,129,130,5,97,
		0,0,130,131,5,100,0,0,131,132,5,100,0,0,132,10,1,0,0,0,133,134,5,115,0,
		0,134,135,5,117,0,0,135,136,5,98,0,0,136,12,1,0,0,0,137,138,5,109,0,0,
		138,139,5,117,0,0,139,140,5,108,0,0,140,14,1,0,0,0,141,142,5,100,0,0,142,
		143,5,105,0,0,143,144,5,118,0,0,144,16,1,0,0,0,145,146,5,99,0,0,146,147,
		5,109,0,0,147,148,5,112,0,0,148,149,5,108,0,0,149,150,5,116,0,0,150,18,
		1,0,0,0,151,152,5,99,0,0,152,153,5,109,0,0,153,154,5,112,0,0,154,155,5,
		101,0,0,155,156,5,113,0,0,156,20,1,0,0,0,157,158,5,99,0,0,158,159,5,109,
		0,0,159,160,5,112,0,0,160,161,5,103,0,0,161,162,5,116,0,0,162,22,1,0,0,
		0,163,164,5,105,0,0,164,165,5,110,0,0,165,166,5,118,0,0,166,24,1,0,0,0,
		167,168,5,97,0,0,168,169,5,110,0,0,169,170,5,100,0,0,170,26,1,0,0,0,171,
		172,5,111,0,0,172,173,5,114,0,0,173,28,1,0,0,0,174,175,5,120,0,0,175,176,
		5,111,0,0,176,177,5,114,0,0,177,30,1,0,0,0,178,179,5,115,0,0,179,180,5,
		104,0,0,180,181,5,105,0,0,181,182,5,102,0,0,182,183,5,116,0,0,183,184,
		5,108,0,0,184,32,1,0,0,0,185,186,5,115,0,0,186,187,5,104,0,0,187,188,5,
		105,0,0,188,189,5,102,0,0,189,190,5,116,0,0,190,191,5,114,0,0,191,34,1,
		0,0,0,192,193,5,116,0,0,193,194,5,114,0,0,194,195,5,97,0,0,195,196,5,112,
		0,0,196,36,1,0,0,0,197,198,5,108,0,0,198,199,5,101,0,0,199,200,5,97,0,
		0,200,38,1,0,0,0,201,202,5,108,0,0,202,203,5,111,0,0,203,204,5,97,0,0,
		204,205,5,100,0,0,205,40,1,0,0,0,206,207,5,115,0,0,207,208,5,116,0,0,208,
		209,5,111,0,0,209,210,5,114,0,0,210,211,5,101,0,0,211,42,1,0,0,0,212,213,
		5,44,0,0,213,44,1,0,0,0,214,215,5,91,0,0,215,46,1,0,0,0,216,217,5,93,0,
		0,217,48,1,0,0,0,218,220,3,61,30,0,219,218,1,0,0,0,220,221,1,0,0,0,221,
		219,1,0,0,0,221,222,1,0,0,0,222,50,1,0,0,0,223,229,3,59,29,0,224,228,3,
		59,29,0,225,228,7,0,0,0,226,228,3,61,30,0,227,224,1,0,0,0,227,225,1,0,
		0,0,227,226,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,
		52,1,0,0,0,231,229,1,0,0,0,232,234,7,1,0,0,233,232,1,0,0,0,234,235,1,0,
		0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,238,6,26,0,0,238,
		54,1,0,0,0,239,241,5,13,0,0,240,239,1,0,0,0,240,241,1,0,0,0,241,242,1,
		0,0,0,242,243,5,10,0,0,243,244,1,0,0,0,244,245,6,27,0,0,245,56,1,0,0,0,
		246,250,5,59,0,0,247,249,8,2,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,248,
		1,0,0,0,250,251,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,253,255,5,13,0,
		0,254,253,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,257,5,10,0,0,257,
		258,1,0,0,0,258,259,6,28,0,0,259,58,1,0,0,0,260,261,7,3,0,0,261,60,1,0,
		0,0,262,263,2,48,57,0,263,62,1,0,0,0,11,0,106,122,127,221,227,229,235,
		240,250,254,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
