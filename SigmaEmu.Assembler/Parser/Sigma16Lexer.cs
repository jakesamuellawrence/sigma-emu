//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Parser\Sigma16.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class Sigma16Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, RRR_COMMAND=2, RX_COMMAND=3, ADD=4, SUB=5, MUL=6, DIV=7, TRAP=8, 
		LEA=9, LOAD=10, STORE=11, NUM=12, LABEL=13, COMMA=14, LBRACK=15, RBRACK=16, 
		REG_PREFIX=17, SPACE=18, EOL=19, COMMENT=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "RRR_COMMAND", "RX_COMMAND", "ADD", "SUB", "MUL", "DIV", "TRAP", 
		"LEA", "LOAD", "STORE", "NUM", "LABEL", "COMMA", "LBRACK", "RBRACK", "REG_PREFIX", 
		"SPACE", "EOL", "COMMENT", "LETTER", "DIGIT"
	};


	public Sigma16Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Sigma16Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'data'", null, null, "'add'", "'sub'", "'mul'", "'div'", "'trap'", 
		"'lea'", "'load'", "'store'", null, null, "','", "'['", "']'", "'R'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "RRR_COMMAND", "RX_COMMAND", "ADD", "SUB", "MUL", "DIV", "TRAP", 
		"LEA", "LOAD", "STORE", "NUM", "LABEL", "COMMA", "LBRACK", "RBRACK", "REG_PREFIX", 
		"SPACE", "EOL", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sigma16.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Sigma16Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,20,152,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,56,8,1,1,2,1,2,1,2,1,
		2,3,2,62,8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,
		6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
		1,10,1,10,1,10,1,10,1,11,4,11,101,8,11,11,11,12,11,102,1,12,1,12,1,12,
		5,12,108,8,12,10,12,12,12,111,9,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
		1,16,1,17,4,17,122,8,17,11,17,12,17,123,1,17,1,17,1,18,3,18,129,8,18,1,
		18,1,18,1,18,1,18,1,19,1,19,5,19,137,8,19,10,19,12,19,140,9,19,1,19,3,
		19,143,8,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,0,0,22,1,1,3,2,5,3,
		7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,0,43,0,1,0,4,3,0,65,81,83,90,97,122,2,0,9,9,
		32,32,2,0,10,10,13,13,2,0,65,90,97,122,163,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
		1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
		0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
		0,0,39,1,0,0,0,1,45,1,0,0,0,3,55,1,0,0,0,5,61,1,0,0,0,7,63,1,0,0,0,9,67,
		1,0,0,0,11,71,1,0,0,0,13,75,1,0,0,0,15,79,1,0,0,0,17,84,1,0,0,0,19,88,
		1,0,0,0,21,93,1,0,0,0,23,100,1,0,0,0,25,104,1,0,0,0,27,112,1,0,0,0,29,
		114,1,0,0,0,31,116,1,0,0,0,33,118,1,0,0,0,35,121,1,0,0,0,37,128,1,0,0,
		0,39,134,1,0,0,0,41,148,1,0,0,0,43,150,1,0,0,0,45,46,5,100,0,0,46,47,5,
		97,0,0,47,48,5,116,0,0,48,49,5,97,0,0,49,2,1,0,0,0,50,56,3,7,3,0,51,56,
		3,9,4,0,52,56,3,11,5,0,53,56,3,13,6,0,54,56,3,15,7,0,55,50,1,0,0,0,55,
		51,1,0,0,0,55,52,1,0,0,0,55,53,1,0,0,0,55,54,1,0,0,0,56,4,1,0,0,0,57,62,
		3,17,8,0,58,62,3,19,9,0,59,62,3,21,10,0,60,62,3,15,7,0,61,57,1,0,0,0,61,
		58,1,0,0,0,61,59,1,0,0,0,61,60,1,0,0,0,62,6,1,0,0,0,63,64,5,97,0,0,64,
		65,5,100,0,0,65,66,5,100,0,0,66,8,1,0,0,0,67,68,5,115,0,0,68,69,5,117,
		0,0,69,70,5,98,0,0,70,10,1,0,0,0,71,72,5,109,0,0,72,73,5,117,0,0,73,74,
		5,108,0,0,74,12,1,0,0,0,75,76,5,100,0,0,76,77,5,105,0,0,77,78,5,118,0,
		0,78,14,1,0,0,0,79,80,5,116,0,0,80,81,5,114,0,0,81,82,5,97,0,0,82,83,5,
		112,0,0,83,16,1,0,0,0,84,85,5,108,0,0,85,86,5,101,0,0,86,87,5,97,0,0,87,
		18,1,0,0,0,88,89,5,108,0,0,89,90,5,111,0,0,90,91,5,97,0,0,91,92,5,100,
		0,0,92,20,1,0,0,0,93,94,5,115,0,0,94,95,5,116,0,0,95,96,5,111,0,0,96,97,
		5,114,0,0,97,98,5,101,0,0,98,22,1,0,0,0,99,101,3,43,21,0,100,99,1,0,0,
		0,101,102,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,24,1,0,0,0,104,109,
		7,0,0,0,105,108,3,41,20,0,106,108,3,43,21,0,107,105,1,0,0,0,107,106,1,
		0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,26,1,0,0,0,111,
		109,1,0,0,0,112,113,5,44,0,0,113,28,1,0,0,0,114,115,5,91,0,0,115,30,1,
		0,0,0,116,117,5,93,0,0,117,32,1,0,0,0,118,119,5,82,0,0,119,34,1,0,0,0,
		120,122,7,1,0,0,121,120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,
		1,0,0,0,124,125,1,0,0,0,125,126,6,17,0,0,126,36,1,0,0,0,127,129,5,13,0,
		0,128,127,1,0,0,0,128,129,1,0,0,0,129,130,1,0,0,0,130,131,5,10,0,0,131,
		132,1,0,0,0,132,133,6,18,0,0,133,38,1,0,0,0,134,138,5,59,0,0,135,137,8,
		2,0,0,136,135,1,0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,
		139,142,1,0,0,0,140,138,1,0,0,0,141,143,5,13,0,0,142,141,1,0,0,0,142,143,
		1,0,0,0,143,144,1,0,0,0,144,145,5,10,0,0,145,146,1,0,0,0,146,147,6,19,
		0,0,147,40,1,0,0,0,148,149,7,3,0,0,149,42,1,0,0,0,150,151,2,48,57,0,151,
		44,1,0,0,0,10,0,55,61,102,107,109,123,128,138,142,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
