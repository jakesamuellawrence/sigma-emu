@page "/"
@using SigmaEmu.Assembler.Assembler
@using SigmaEmu.Core.Models
@using SigmaEmu.Shared
@inject IJSRuntime JsRuntime

<div class="d-flex flex-column w-100 h-100">
    <Toolbar OnNew="NewSource" OnOpen="LoadFile" OnAssemble="AssembleSource" OnLoad="LoadListing" OnSave="SaveSourceAsync"
             CanOpen="true" CanAssemble="@(_source is not null && !_source.HasErrors())"
             CanLoad="@(_listing is not null && !_listing.HasErrors())"
             CanSave="@(_source is not null)"
             Height="40px"/>
    <div class="d-flex flex-row overflow-hidden">
        <div class="flex-grow-1 flex-shrink-1" style="min-width: 0">
            @if (_source is null)
            {
                <div class="w-100 h-100 bg-grey-darkest d-flex justify-content-around align-items-center">
                    <NoFilePrompt LoadFileEvent="LoadFile" OnNew="NewSource"/>
                </div>
            }
            else
            {
                <TwoTabs LeftLabel="Source" RightLabel="Listing" HasRightTab="_listing is not null"
                         OnSwitchTab="tab => _activeTab = tab"
                         ActiveTab="_activeTab">
                    <LeftTab>
                        <StandaloneCodeEditor
                            @ref="_codeEditor"
                            ConstructionOptions="EditorConstructionOptions"
                            OnDidInit="OnMonacoEditorInitialised"
                            OnDidChangeModelContent="EditorContentChanged"
                            Id="code_editor"
                            CssClass="w-100 h-100"/>
                    </LeftTab>
                    <RightTab>
                        @if (_listing is not null)
                        {
                            <ListingDisplay Listing="_listing" ProgramCounter="_processor.ProgramCounter"
                                            OnUpdateBreakpoints="_processor.SetBreakpoints"/>
                        }
                    </RightTab>
                </TwoTabs>
            }
        </div>
        <ProcessorStatus Processor="_processor" OnPcEdited="StateHasChanged" OnPlay="_processor.Play"
                         OnPlayFast="_processor.PlayFast" OnPlayUnbounded="_processor.PlayUnbounded"
                         OnStep="_processor.Step" OnReset="_processor.Reset" OnPause="_processor.Pause"
                         OnStop="_processor.Stop"/>
    </div>
    <div class="bg-grey-darker text-text-darker border border-dark border-1" style="font-size: 0.8rem;">
        Developed by Jake Lawrence. Project supervised by Lewis Mackenzie.
        All icons from <a class="text-text-darker" href="https://freeicons.io">freeicons.io</a>.
        Icons by <a class="text-text-darker" href="https://freeicons.io/profile/714">Raj Dev</a>,
        <a class="text-text-darker" href="https://freeicons.io/profile/3117">Mas Dhimas</a>,
        <a class="text-text-darker" href="https://freeicons.io/profile/3">icon king1</a>,
        <a class="text-text-darker" href="https://freeicons.io/profile/5790">ColourCreatype</a>,
        <a class="text-text-darker" href="https://freeicons.io/profile/823">Muhammad Haq</a>
    </div>
</div>

@code {

    private Source? _source;
    private Listing? _listing;

    private StandaloneCodeEditor? _codeEditor;

    private TwoTabs.Tab _activeTab = TwoTabs.Tab.Left;

    private readonly Processor _processor = new();

    protected override void OnInitialized()
    {
        _processor.OnTick += StateHasChanged;
    }

    private async Task OnMonacoEditorInitialised()
    {
        if (_codeEditor is null) return;

        await JsRuntime.InvokeVoidAsync("blazorMonaco.editor.registerSigma16");
        await Global.SetModelLanguage(await _codeEditor.GetModel(), "Sigma16");

        await JsRuntime.InvokeVoidAsync("blazorMonaco.editor.SetErrors", _source?.Errors);
    }

    private void Reset()
    {
        _processor.Reset();
    }

    private async Task EditorContentChanged(ModelContentChangedEvent e)
    {
        if (_codeEditor is null || _source is null) return;

        _source.SetContent(await _codeEditor.GetValue());

        await JsRuntime.InvokeVoidAsync("blazorMonaco.editor.SetErrors", _source.Errors);
    }

    private async Task SaveSourceAsync()
    {
        if (_source is null) return;

        var sourceStream = _source.AsStream();
        var filename = _source.FileName;

        using var streamReference = new DotNetStreamReference(sourceStream);

        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", filename, streamReference);
    }

    private void NewSource()
    {
        _source = new Source("new.txt", "");
        _codeEditor?.SetValue(_source.ToString());

        _listing = null;
        _activeTab = TwoTabs.Tab.Left;
    }

    private async void LoadFile(IBrowserFile file)
    {
        var streamReader = new StreamReader(file.OpenReadStream());

        _source = new Source(file.Name, await streamReader.ReadToEndAsync());

        _listing = null;
        _activeTab = TwoTabs.Tab.Left;

        _codeEditor?.SetValue(_source.ToString());

        StateHasChanged();
    }

    private void AssembleSource()
    {
        if (_source is null || _source.HasErrors()) return;
        _listing = Assembler.Assemble(_source);
        _activeTab = TwoTabs.Tab.Right;
        Reset();
    }

    private void LoadListing()
    {
        Reset();

        Console.WriteLine("Loading Listing");
        if (_listing == null || _listing.HasErrors()) return;
        _processor.LoadListing(_listing);
        _processor.Ready();
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Padding = new EditorPaddingOptions { Top = 10, Bottom = 10 },
            Theme = "vs-dark",
            Value = _source?.ToString(),
            FixedOverflowWidgets = true
        };
    }

}