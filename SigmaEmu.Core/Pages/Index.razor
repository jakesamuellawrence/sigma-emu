@page "/"
@using SigmaEmu.Assembler.Assembler
@using SigmaEmu.Core.Models
@using SigmaEmu.Shared
@inject IJSRuntime JsRuntime

<div class="d-flex flex-column w-100 h-100">
    <Toolbar OnNew="NewSource" OnOpen="LoadFile" OnAssemble="AssembleSource" OnLoad="LoadListing" OnSave="SaveSourceAsync"
             CanOpen="true" CanAssemble="@(_source is not null)" CanLoad="@(_listing is not null)"
             CanSave="@(_source is not null)"
             Height="40px"/>
    <div class="d-flex flex-row flex-grow-1 flex-shrink-1 overflow-auto">
        @if (_listing != null)
        {
            <ListingDisplay Listing="_listing" ProgramCounter="_processor.ProgramCounter"
                            OnUpdateBreakpoints="_processor.SetBreakpoints"/>
        }
        else if (_source != null)
        {
            <StandaloneCodeEditor @ref=_codeEditor ConstructionOptions="EditorConstructionOptions"
                                  CssClass="w-100 h-100"
                                  OnDidChangeModelContent="EditorContentChanged"
                                  OnDidInit="OnMonacoEditorInitialised"/>
        }
        else
        {
            <div class="w-100 h-100 bg-grey-darkest d-flex justify-content-around align-items-center">
                <NoFilePrompt LoadFileEvent="LoadFile" OnNew="NewSource"/>
            </div>
        }
        <ProcessorStatus Processor="_processor" OnPcEdited="StateHasChanged" OnPlay="_processor.Play"
                         OnStep="_processor.Step" OnReset="_processor.Reset" OnPause="_processor.Pause"
                         OnStop="_processor.Stop"/>
    </div>
</div>

@code {

    private Source? _source;
    private Listing? _listing;

    private StandaloneCodeEditor? _codeEditor;

    private readonly Processor _processor = new();

    protected override void OnInitialized()
    {
        _processor.OnTick += StateHasChanged;
    }

    private async Task OnMonacoEditorInitialised()
    {
        if (_codeEditor is null) return;

        await JsRuntime.InvokeVoidAsync("blazorMonaco.editor.registerSigma16");
        await Global.SetModelLanguage(await _codeEditor.GetModel(), "Sigma16");
    }

    private void Reset()
    {
        _processor.Reset();
    }

    private async Task EditorContentChanged(ModelContentChangedEvent e)
    {
        if (_codeEditor is null || _source is null) return;

        _source.SetContent(await _codeEditor.GetValue());

        await JsRuntime.InvokeVoidAsync("blazorMonaco.editor.SetErrors", _source.Errors);
    }

    private async Task SaveSourceAsync()
    {
        if (_source is null) return;

        var sourceStream = _source.AsStream();
        var filename = _source.FileName;

        using var streamReference = new DotNetStreamReference(sourceStream);

        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", filename, streamReference);
    }

    private void NewSource()
    {
        _source = new Source("new.txt", "");
        _codeEditor?.SetValue(_source.ToString());
    }

    private async void LoadFile(IBrowserFile file)
    {
        var streamReader = new StreamReader(file.OpenReadStream());

        _source = new Source(file.Name, await streamReader.ReadToEndAsync());

        _listing = null;

        _codeEditor?.SetValue(_source.ToString());

        StateHasChanged();
    }

    private void AssembleSource()
    {
        if (_source is null || _source.HasErrors()) return;
        _listing = Assembler.Assemble(_source);
        Reset();
    }

    private void LoadListing()
    {
        Console.WriteLine("Loading Listing");
        if (_listing == null || _listing.HasErrors()) return;
        _processor.LoadListing(_listing);
        _processor.Ready();
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Padding = new EditorPaddingOptions { Top = 30, Bottom = 30 },
            Theme = "vs-dark",
            Value = _source?.ToString(),
            FixedOverflowWidgets = true
        };
    }

}