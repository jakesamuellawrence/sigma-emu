@using SigmaEmu.Shared
@using Register = SigmaEmu.Core.Models.Register
<div class="w-100 h-100 bg-grey-main text-white p-2 overflow-auto">
    @if (Listing is null)
    {
        <p>No Listing provided</p>
    }
    else if (ProgramCounter is null)
    {
        <p>No Program Counter given</p>
    }
    else
    {
        <div class="d-flex flex-column font-monospace">
            @foreach (var error in Listing.Errors)
            {
                <span class="text-text-write">@error.Format()</span>
            }
            <div class="d-flex flex-row gap-4 fw-bold">
                <span class="square overflow-hidden text-center">BP</span>
                <span class="col-1">Line</span>
                <span class="col-1">Address</span>
                <span class="col-1">Code</span>
                <span class="col">Source</span>
            </div>
            @for (var lineNumber = 1; lineNumber <= Listing.NumLines; lineNumber++)
            {
                var line = Listing.GetLine(lineNumber);
                @if (ProgramCounter.GetValueWithoutReading() == (line.Address ?? Word.FromInt(-1)) && line.Code1 is not null)
                {
                    <hr class="text-text-write my-0 border border-1 border-text-write"/>
                }
                <div class="d-flex flex-row gap-4">
                    <div @onclick="() => {if (line.HasBreakpoint) RemoveBreakpoint(line); else AddBreakpoint(line);}"
                         class="square d-flex justify-content-center align-items-center"
                         role="button">
                        @if (line.HasBreakpoint)
                        {
                            <div class="h-75 w-75 rounded rounded-circle bg-text-read">
                            </div>
                        }
                    </div>
                    <span class="col-1">@lineNumber</span>
                    <span class="col-1">@(line.Address is null ? "" : line.Address.AsHexString())</span>
                    <span class="col-1">
                        @(line.Code1 is null ? "" : line.Code1.AsHexString())
                        @(line.Code2 is null ? "" : line.Code2.AsHexString())
                    </span>
                    <span class="col" style="white-space: pre">@line.Source</span>
                </div>
                @foreach (var error in Listing.GetErrorsForLine(lineNumber))
                {
                    <span class="text-text-write">@error.Message</span>
                }
            }
            <div class="d-flex flex-row gap-4 fw-bold mt-4">
                <span class="col-1">Address</span>
                <span class="col-2">Symbol</span>
                <span class="col-1">Defined on</span>
                <span class="col-1">Used on</span>
            </div>
            @foreach (var label in Listing.Labels)
            {
                <div class="d-flex flex-row gap-4">
                    <span class="col-1">@(label.Address?.AsHexString() ?? "")</span>
                    <span class="col-2">@label.Name</span>
                    <span class="col-1">@(label.DefinedOn)</span>
                    <span class="col-1">[@(string.Join(", ", label.UsedOn))]</span>
                </div>
            }
        </div>
    }
</div>

@code {

    [Parameter]
    [EditorRequired]
    public Listing? Listing { get; set; }

    [Parameter]
    [EditorRequired]
    public Register? ProgramCounter { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback<HashSet<Word>> OnUpdateBreakpoints { get; set; }

    private void AddBreakpoint(ListingLine line)
    {
        line.HasBreakpoint = true;
        OnUpdateBreakpoints.InvokeAsync(Listing?.GetBreakpointAddresses());
    }

    private void RemoveBreakpoint(ListingLine line)
    {
        line.HasBreakpoint = false;
        OnUpdateBreakpoints.InvokeAsync(Listing?.GetBreakpointAddresses());
    }

}