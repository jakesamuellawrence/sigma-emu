@using SigmaEmu.Shared
@using Register = SigmaEmu.Core.Models.Register
<div class="w-100 h-100 bg-grey-main text-white p-2 overflow-auto">
    @if (Listing is null)
    {
        <p>No Listing provided</p>
    }
    else if (ProgramCounter is null)
    {
        <p>No Program Counter given</p>
    }
    else
    {
        <div class="d-flex flex-column font-monospace">
            @foreach (var error in Listing.Errors)
            {
                <span class="text-text-write">@error.Format()</span>
            }
            <div class="d-flex flex-row gap-4 fw-bold">
                <span class="flex-shrink-0" style="width: @(BpColWidth)px">BP</span>
                <span class="flex-shrink-0" style="width: @(LineNumberColWidth)px">Line</span>
                <span class="flex-shrink-0" style="width: @(AddressColWidth)px">Address</span>
                <span class="flex-shrink-0" style="width: @(CodeColWidth)px">Code</span>
                <span>Source</span>
            </div>
            @for (var lineNumber = 1; lineNumber <= Listing.NumLines; lineNumber++)
            {
                var line = Listing.GetLine(lineNumber);
                @if (ProgramCounter.GetValueWithoutReading() == (line.Address ?? Word.FromInt(-1)) && line.Code1 is not null)
                {
                    <hr class="text-text-write my-0 border border-1 border-text-write"/>
                }
                <div class="d-flex flex-row gap-4">
                    <div @onclick="() => {if (line.HasBreakpoint) RemoveBreakpoint(line); else AddBreakpoint(line);}"
                         class="flex-shrink-0 d-flex justify-content-center align-items-center"
                         style="width: @(BpColWidth)px"
                         role="button">
                        @if (line.HasBreakpoint)
                        {
                            <div class="h-75 w-75 rounded rounded-circle bg-text-read">
                            </div>
                        }
                    </div>
                    <span class="flex-shrink-0 overflow-auto" style="width: @(LineNumberColWidth)px">@lineNumber</span>
                    <span class="flex-shrink-0" style="width: @(AddressColWidth)px">@(line.Address is null ? "" : line.Address.AsHexString())</span>
                    <span class="flex-shrink-0" style="width: @(CodeColWidth)px">
                        @(line.Code1 is null ? "" : line.Code1.AsHexString())
                        @(line.Code2 is null ? "" : line.Code2.AsHexString())
                    </span>
                    <span class="flex-shrink-0" style="white-space: pre">@line.Source</span>
                </div>
                @foreach (var error in Listing.GetErrorsForLine(lineNumber))
                {
                    <span class="text-text-write">@error.Message</span>
                }
            }

            <div class="d-flex flex-row gap-4 fw-bold mt-4">
                <span class="flex-shrink-0" style="width: @(BpColWidth)px"></span>
                <span class="flex-shrink-0" style="width: @(LineNumberColWidth)px">Def</span>
                <span class="flex-shrink-0" style="width: @(AddressColWidth)px">Address</span>
                <span class="flex-shrink-0" style="width: @(CodeColWidth)px">Used</span>
                <span>Symbol</span>
            </div>
            @foreach (var label in Listing.Labels)
            {
                <div class="d-flex flex-row gap-4">
                    <span class="flex-shrink-0" style="width: @(BpColWidth)px"></span>
                    <span class="flex-shrink-0 overflow-auto" style="width: @(LineNumberColWidth)px">@(label.DefinedOn)</span>
                    <span class="flex-shrink-0" style="width: @(AddressColWidth)px">@(label.Address?.AsHexString() ?? "")</span>
                    <span class="flex-shrink-0" style="width: @(CodeColWidth)px">[@(string.Join(", ", label.UsedOn))]</span>
                    <span class="flex-shrink-0">@label.Name</span>
                </div>
            }
        </div>
    }
</div>

@code {

        const int BpColWidth = 24;
        const int LineNumberColWidth = 36;
        const int AddressColWidth = 62;
        const int CodeColWidth = 80;

    // const int LabelAddressColWidth = LineNumberColWidth + AddressColWidth;
    // const int LabelSymbolColWidth = 100;
    // const int LabelDefinedColWidth = 90;

    [Parameter]
    [EditorRequired]
    public Listing? Listing { get; set; }

    [Parameter]
    [EditorRequired]
    public Register? ProgramCounter { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback<HashSet<Word>> OnUpdateBreakpoints { get; set; }

    private void AddBreakpoint(ListingLine line)
    {
        line.HasBreakpoint = true;
        OnUpdateBreakpoints.InvokeAsync(Listing?.GetBreakpointAddresses());
    }

    private void RemoveBreakpoint(ListingLine line)
    {
        line.HasBreakpoint = false;
        OnUpdateBreakpoints.InvokeAsync(Listing?.GetBreakpointAddresses());
    }

}